services:
  app1:
    container_name: "nbascoring1"
    build:
      dockerfile: src/main/docker/Dockerfile.jvm
      context: .
    environment:
      QUARKUS_DATASOURCE_USERNAME: admin
      QUARKUS_DATASOURCE_PASSWORD: ewcode123
    depends_on:
      postgres:
        condition: "service_healthy"
      kafka:
        condition: "service_started"
    ports:
      - 8080:8080
    deploy:
      resources:
        limits:
          cpus: '1.5'
          memory: '3GB'
  #  app2:
  #    container_name: "nbascoring2"
  #    build:
  #      dockerfile: src/main/docker/Dockerfile.jvm
  #      context: .
  #    depends_on:
  #      - postgres
  #      - kafka
  #    ports:
  #      - 8081:8080

  postgres:
    image: postgres:latest
    container_name: postgres_db
    restart: always
    environment:
      POSTGRES_DB: nbascoring
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: ewcode123
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -d $${POSTGRES_DB} -U $${POSTGRES_USER}" ]
      interval: 10s
      timeout: 5s
      retries: 5
  mongodb:
    image: mongo:latest
    ports:
      - '27017:27017'
    volumes:
      - mongodb_data:/data/db
  kafka:
    image: bitnami/kafka:latest
    restart: on-failure
    ports:
      - 9092:9092
    environment:
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://host.docker.internal:9092
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
    depends_on:
      - zookeeper
  zookeeper:
    image: bitnami/zookeeper:latest
    ports:
      - 2181:2181
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
  kafka-ui:
    image: provectuslabs/kafka-ui
    container_name: kafka-ui
    depends_on:
      - kafka
      - zookeeper
    ports:
      - "3030:8080"
    restart: always
    environment:
      - KAFKA_CLUSTERS_0_NAME=nbascoring
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=host.docker.internal:9092
      - KAFKA_CLUSTERS_0_ZOOKEEPER=zookeeper:2181
  prometheus:
    image: prom/prometheus
    container_name: prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
    ports:
      - 9090:9090
    restart: unless-stopped
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
  grafana:
    image: grafana/grafana
    container_name: grafana
    ports:
      - 3000:3000
    restart: unless-stopped
    depends_on:
      - prometheus
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=grafana
    volumes:
      - ./grafana/dashboards/default.yaml:/etc/grafana/provisioning/dashboards/default.yaml
      - ./grafana/datasources/default.yaml:/etc/grafana/provisioning/datasources/default.yaml
      - ./grafana/dashboards:/var/lib/grafana/dashboards
      - grafana-storage:/var/lib/grafana

volumes:
  prometheus_data: { }
  grafana-storage: { }
  mongodb_data: {}
  postgres_data: {}
